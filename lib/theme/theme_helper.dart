import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              6,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.secondaryContainer.withOpacity(1),
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              6,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(colorScheme.onPrimary),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        checkColor: MaterialStateProperty.all<Color>(colorScheme.onPrimary),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.secondaryContainer.withOpacity(1),
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray200,
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w500,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onError,
          fontSize: getFontSize(
            31,
          ),
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onError,
          fontSize: getFontSize(
            8,
          ),
          fontFamily: 'GE Dinar One',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w700,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.blueGray800,
          fontSize: getFontSize(
            48,
          ),
          fontFamily: 'Calibri',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Noto Kufi Arabic',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0X59252525),
    error: Color(0XFF111111),
    errorContainer: Color(0XFFEB1F39),
    inversePrimary: Color(0X59252525),
    inverseSurface: Color(0XFF111111),
    onBackground: Color(0XFFF3D18D),
    onError: Color(0XA5F15E38),
    onErrorContainer: Color(0X7FFFFFFF),
    onInverseSurface: Color(0XA5F15E38),
    onPrimary: Color(0XFF111111),
    onPrimaryContainer: Color(0XFFF3D18D),
    onSecondary: Color(0XFFF3D18D),
    onSecondaryContainer: Color(0XFF111111),
    onSurface: Color(0XFFF3D18D),
    onSurfaceVariant: Color(0XFF111111),
    onTertiary: Color(0XFFF3D18D),
    onTertiaryContainer: Color(0XFF111111),
    outline: Color(0XFF111111),
    outlineVariant: Color(0X59252525),
    primary: Color(0XFFF15E38),
    primaryContainer: Color(0X59252525),
    scrim: Color(0X59252525),
    secondary: Color(0X59252525),
    secondaryContainer: Color(0X337F7F7F),
    shadow: Color(0XFF111111),
    surface: Color(0X59252525),
    surfaceTint: Color(0XFF111111),
    surfaceVariant: Color(0X337F7F7F),
    tertiary: Color(0X59252525),
    tertiaryContainer: Color(0X337F7F7F),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFF5D695);
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFBDBDD4);
  Color get blueGray20001 => Color(0XFFBDBDD5);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFEDF2F8);
  Color get blueGray800 => Color(0XFF334756);
  Color get blueGray80001 => Color(0XFF2C394B);
  Color get blueGray900 => Color(0XFF25333A);
  // DeepOrangec
  Color get deepOrange9004c => Color(0X4CC54500);
  // Gray
  Color get gray100 => Color(0XFFF1F3F6);
  Color get gray200 => Color(0XFFEDEDED);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray900 => Color(0XFF082032);
  // LightGreen
  Color get lightGreenA700 => Color(0XFF40BE05);
  // Orange
  Color get orange100 => Color(0XFFF9DFA8);
  Color get orange10001 => Color(0XFFF7DFA3);
  Color get orange10002 => Color(0XFFF7DCA3);
  Color get orange10003 => Color(0XFFFBE5B6);
  // Yellow
  Color get yellow800 => Color(0XFFEC9F2D);
  Color get yellow80001 => Color(0XFFED9D28);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
